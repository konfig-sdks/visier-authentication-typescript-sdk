/* tslint:disable */
/* eslint-disable */
/*
Visier Authentication APIs

Visier APIs for generating authentication tokens

The version of the OpenAPI document: 22222222.99201.1200


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AuthenticationRequest } from '../models';
// @ts-ignore
import { Status } from '../models';
// @ts-ignore
import { TokenRequestBody } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate a Visier authentication token
         * @param {AuthenticationRequest} authenticationRequest Authentication token request body
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        aSIDTokenAuthentication: async (authenticationRequest: AuthenticationRequest, username?: string, password?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticationRequest' is not null or undefined
            assertParamExists('aSIDTokenAuthentication', 'authenticationRequest', authenticationRequest)
            const localVarPath = `/v1/admin/visierSecureToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


            if (username !== undefined) {
                await addFormParam('username', username, false, true)
            }
    
            if (password !== undefined) {
                await addFormParam('password', password, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: authenticationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/visierSecureToken',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(authenticationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiate an OAuth2 authorization code flow.
         * @param {string} responseType The response type. Must be &#x60;code&#x60;.
         * @param {string} clientId The ID of the pre-registered client application.
         * @param {string} [redirectUri] The optional URI to redirect to after authorization.
         * @param {string} [scope] The OAuth 2.0 scope of the authorization request. Defaults to &#x60;read&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuth2Authorize: async (responseType: string, clientId: string, redirectUri?: string, scope?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'responseType' is not null or undefined
            assertParamExists('oAuth2Authorize', 'responseType', responseType)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('oAuth2Authorize', 'clientId', clientId)
            const localVarPath = `/v1/auth/oauth2/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }

            if (responseType !== undefined) {
                localVarQueryParameter['response_type'] = responseType;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/auth/oauth2/authorize',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a JSON Web Token (JWT) for the specified user.
         * @param {TokenRequestBody} tokenRequestBody 
         * @param {string} [grantType] The grant type. Supported values: - &#x60;authorization_code&#x60;: The authorization code grant type. - &#x60;password&#x60;: The password grant type. - &#x60;urn:visier:params:oauth:grant-type:asid-token&#x60;: The ASID token grant type.
         * @param {string} [clientId] The ID of the pre-registered client application.
         * @param {string} [redirectUri] The optional URI to redirect to after authorization.
         * @param {string} [code] The authorization code. Applicable only for authorization code grant type.
         * @param {string} [username] The username of the user to authenticate. Applicable only for password grant type.
         * @param {string} [password] The password of the user to authenticate. Applicable only for password grant type.
         * @param {string} [asidToken] The ASID token. Applicable only for ASID token grant type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuth2Token: async (tokenRequestBody: TokenRequestBody, grantType?: string, clientId?: string, redirectUri?: string, code?: string, username?: string, password?: string, asidToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenRequestBody' is not null or undefined
            assertParamExists('oAuth2Token', 'tokenRequestBody', tokenRequestBody)
            const localVarPath = `/v1/auth/oauth2/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (grantType !== undefined) {
                await addFormParam('grant_type', grantType, false, true)
            }
    
            if (clientId !== undefined) {
                await addFormParam('client_id', clientId, false, true)
            }
    
            if (redirectUri !== undefined) {
                await addFormParam('redirect_uri', redirectUri, false, true)
            }
    
            if (code !== undefined) {
                await addFormParam('code', code, false, true)
            }
    
            if (username !== undefined) {
                await addFormParam('username', username, false, true)
            }
    
            if (password !== undefined) {
                await addFormParam('password', password, false, true)
            }
    
            if (asidToken !== undefined) {
                await addFormParam('asid_token', asidToken, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tokenRequestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/auth/oauth2/token',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tokenRequestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a legacy Visier secure ticket
         * @param {AuthenticationRequest} authenticationRequest Secure ticket request body
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ticketAuthentication: async (authenticationRequest: AuthenticationRequest, username?: string, password?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticationRequest' is not null or undefined
            assertParamExists('ticketAuthentication', 'authenticationRequest', authenticationRequest)
            const localVarPath = `/v1/admin/visierSecureTicket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


            if (username !== undefined) {
                await addFormParam('username', username, false, true)
            }
    
            if (password !== undefined) {
                await addFormParam('password', password, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: authenticationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/visierSecureTicket',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(authenticationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate a Visier authentication token
         * @param {AuthenticationApiASIDTokenAuthenticationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async aSIDTokenAuthentication(requestParameters: AuthenticationApiASIDTokenAuthenticationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const authenticationRequest: AuthenticationRequest = {
                username: requestParameters.username,
                password: requestParameters.password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.aSIDTokenAuthentication(authenticationRequest, requestParameters.username, requestParameters.password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Initiate an OAuth2 authorization code flow.
         * @param {AuthenticationApiOAuth2AuthorizeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oAuth2Authorize(requestParameters: AuthenticationApiOAuth2AuthorizeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oAuth2Authorize(requestParameters.responseType, requestParameters.clientId, requestParameters.redirectUri, requestParameters.scope, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate a JSON Web Token (JWT) for the specified user.
         * @param {AuthenticationApiOAuth2TokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oAuth2Token(requestParameters: AuthenticationApiOAuth2TokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const tokenRequestBody: TokenRequestBody = {
                grant_type: requestParameters.grant_type,
                client_id: requestParameters.client_id,
                redirect_uri: requestParameters.redirect_uri,
                code: requestParameters.code,
                username: requestParameters.username,
                password: requestParameters.password,
                asid_token: requestParameters.asid_token
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.oAuth2Token(tokenRequestBody, requestParameters.grantType, requestParameters.clientId, requestParameters.redirectUri, requestParameters.code, requestParameters.username, requestParameters.password, requestParameters.asidToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate a legacy Visier secure ticket
         * @param {AuthenticationApiTicketAuthenticationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async ticketAuthentication(requestParameters: AuthenticationApiTicketAuthenticationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const authenticationRequest: AuthenticationRequest = {
                username: requestParameters.username,
                password: requestParameters.password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketAuthentication(authenticationRequest, requestParameters.username, requestParameters.password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Generate a Visier authentication token
         * @param {AuthenticationApiASIDTokenAuthenticationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        aSIDTokenAuthentication(requestParameters: AuthenticationApiASIDTokenAuthenticationRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.aSIDTokenAuthentication(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiate an OAuth2 authorization code flow.
         * @param {AuthenticationApiOAuth2AuthorizeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuth2Authorize(requestParameters: AuthenticationApiOAuth2AuthorizeRequest, options?: AxiosRequestConfig): AxiosPromise<Status> {
            return localVarFp.oAuth2Authorize(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a JSON Web Token (JWT) for the specified user.
         * @param {AuthenticationApiOAuth2TokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oAuth2Token(requestParameters: AuthenticationApiOAuth2TokenRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.oAuth2Token(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a legacy Visier secure ticket
         * @param {AuthenticationApiTicketAuthenticationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        ticketAuthentication(requestParameters: AuthenticationApiTicketAuthenticationRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.ticketAuthentication(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for aSIDTokenAuthentication operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiASIDTokenAuthenticationRequest
 */
export type AuthenticationApiASIDTokenAuthenticationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AuthenticationApiASIDTokenAuthentication
    */
    readonly username?: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthenticationApiASIDTokenAuthentication
    */
    readonly password?: string
    
} & AuthenticationRequest

/**
 * Request parameters for oAuth2Authorize operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiOAuth2AuthorizeRequest
 */
export type AuthenticationApiOAuth2AuthorizeRequest = {
    
    /**
    * The response type. Must be `code`.
    * @type {string}
    * @memberof AuthenticationApiOAuth2Authorize
    */
    readonly responseType: string
    
    /**
    * The ID of the pre-registered client application.
    * @type {string}
    * @memberof AuthenticationApiOAuth2Authorize
    */
    readonly clientId: string
    
    /**
    * The optional URI to redirect to after authorization.
    * @type {string}
    * @memberof AuthenticationApiOAuth2Authorize
    */
    readonly redirectUri?: string
    
    /**
    * The OAuth 2.0 scope of the authorization request. Defaults to `read`.
    * @type {string}
    * @memberof AuthenticationApiOAuth2Authorize
    */
    readonly scope?: string
    
}

/**
 * Request parameters for oAuth2Token operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiOAuth2TokenRequest
 */
export type AuthenticationApiOAuth2TokenRequest = {
    
    /**
    * The grant type. Supported values: - `authorization_code`: The authorization code grant type. - `password`: The password grant type. - `urn:visier:params:oauth:grant-type:asid-token`: The ASID token grant type.
    * @type {string}
    * @memberof AuthenticationApiOAuth2Token
    */
    readonly grantType?: string
    
    /**
    * The ID of the pre-registered client application.
    * @type {string}
    * @memberof AuthenticationApiOAuth2Token
    */
    readonly clientId?: string
    
    /**
    * The optional URI to redirect to after authorization.
    * @type {string}
    * @memberof AuthenticationApiOAuth2Token
    */
    readonly redirectUri?: string
    
    /**
    * The authorization code. Applicable only for authorization code grant type.
    * @type {string}
    * @memberof AuthenticationApiOAuth2Token
    */
    readonly code?: string
    
    /**
    * The username of the user to authenticate. Applicable only for password grant type.
    * @type {string}
    * @memberof AuthenticationApiOAuth2Token
    */
    readonly username?: string
    
    /**
    * The password of the user to authenticate. Applicable only for password grant type.
    * @type {string}
    * @memberof AuthenticationApiOAuth2Token
    */
    readonly password?: string
    
    /**
    * The ASID token. Applicable only for ASID token grant type.
    * @type {string}
    * @memberof AuthenticationApiOAuth2Token
    */
    readonly asidToken?: string
    
} & TokenRequestBody

/**
 * Request parameters for ticketAuthentication operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiTicketAuthenticationRequest
 */
export type AuthenticationApiTicketAuthenticationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AuthenticationApiTicketAuthentication
    */
    readonly username?: string
    
    /**
    * 
    * @type {string}
    * @memberof AuthenticationApiTicketAuthentication
    */
    readonly password?: string
    
} & AuthenticationRequest

/**
 * AuthenticationApiGenerated - object-oriented interface
 * @export
 * @class AuthenticationApiGenerated
 * @extends {BaseAPI}
 */
export class AuthenticationApiGenerated extends BaseAPI {
    /**
     * Generate a Visier authentication token
     * @param {AuthenticationApiASIDTokenAuthenticationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    public aSIDTokenAuthentication(requestParameters: AuthenticationApiASIDTokenAuthenticationRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).aSIDTokenAuthentication(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initiate an OAuth2 authorization code flow.
     * @param {AuthenticationApiOAuth2AuthorizeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    public oAuth2Authorize(requestParameters: AuthenticationApiOAuth2AuthorizeRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).oAuth2Authorize(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a JSON Web Token (JWT) for the specified user.
     * @param {AuthenticationApiOAuth2TokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    public oAuth2Token(requestParameters: AuthenticationApiOAuth2TokenRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).oAuth2Token(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a legacy Visier secure ticket
     * @param {AuthenticationApiTicketAuthenticationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AuthenticationApiGenerated
     */
    public ticketAuthentication(requestParameters: AuthenticationApiTicketAuthenticationRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).ticketAuthentication(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
